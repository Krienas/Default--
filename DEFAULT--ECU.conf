# Custom ECU by TheGreatSardini based on ArchHud

name: DEFAULT--ECU 1.0

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    container:
        class: FuelContainer
        select: all
    gyro:
        class: GyroUnit
    vBooster:
        class: VerticalBooster
    hover:
        class: Hovercraft
    telemeter:
        class: TelemeterUnit
        select: manual
        
handlers:
    unit:
        onStart:
            lua: |
                local BrakeLand = true --export: Should ship brakeland if ECU activates.  False means continue level flight.
                Hold = false --export: Stop moving, hold position and altitude
                planetInfluence = 0.6 --export: (Default 0.6) Threshold above which ECU considers you to be in planet gravity influence.
                verticalAutoLandingSpeed = 60 --export: Vertical auto landing speec in km/h

                Nav = Navigator.new(system, core, unit)
                planetInfluenceThreshold = 0.6
                LandedActivated = false
                BrakeLanding = false
                BrakeIsOn = false
                targetPitch = 0
                planetInfluence = unit.getClosestPlanetInfluence()
                if planetInfluence > planetInfluenceThreshold
                then
                    -- change from cruise to throttle
                    if Nav.axisCommandManager:getAxisCommandType(0) == 1 
                    then
                        Nav.control.cancelCurrentControlMasterMode()
                    end
                    if BrakeLand then 
                        BrakeLanding = true 
                        Nav:setEngineForceCommand('thrust', vec3())
                    end
                end
                if antigrav ~= nil then
                    antigrav.activate()
                    antigrav.showWidget()
                end

                local lastvgd = -1
                local lasthgd = -1
                function AboveGroundLevel()
                 local function hoverDetectGround()
                  local vGndDist,vGndMax,hGndDist,hGndMax = -1,-1,-1,-1
                  if vBooster then
                   vGndDist = vBooster.getDistance()
                   vGndMax = vBooster.getMaxDistance()
                   if vGndDist > -1 and vGndDist < 0.01 then vGndDist = lastvgd else lastvgd = vGndDist end
                  end
                  if hover then
                   hGndDist = hover.getDistance()
                   hGndMax = hover.getMaxDistance()
                   if hGndDist > -1 and hGndDist < 0.01 then hGndDist = lasthgd else lasthgd = hGndDist end
                  end
                  if vGndDist ~= -1 and hGndDist ~= -1 then
                   if vGndDist < hGndDist then
                    return vGndDist, math.max(vGndMax,hGndMax)
                   else
                    return hGndDist, math.max(vGndMax,hGndMax)
                   end
                  elseif vGndDist ~= -1 then
                   return vGndDist, vGndMax
                  elseif hGndDist ~= -1 then
                   return hGndDist, hGndMax
                  else
                   return -1, math.max(vGndMax,hGndMax)
                  end
                 end
                 local hovGndDet, hovGndMax = hoverDetectGround() 
                 local telGndDet = -1
                 local cAV = construct.getVelocity()
                 --local velMag = vectorLen(cAV[1], cAV[2], cAV[3])
                 if telemeter_1 then 
                  telGndDet = telemeter_1.raycast().distance
                  if telGndDet == 0 then telGndDet = -1 end
                 end
                 if hovGndDet > 0.2 and telGndDet ~= -1 then
                  if hovGndDet < telGndDet then 
                   return hovGndDet, hovGndMax
                  else
                   return telGndDet, hovGndMax
                  end
                 elseif telGndDet ~= -1 then
                  return telGndDet, hovGndMax
                 else
                  return hovGndDet, hovGndMax
                 end
                end
                groundDistance, maxRange = 0,0

    system:
        onFlush:
            lua: |
                --local verticalAutoLandingSpeed = 20 --export: Vertical auto landing speec in km/h
                planetInfluence = unit.getClosestPlanetInfluence()
                local power = 3
                local worldUp = vec3(construct.getWorldOrientationUp())
                local worldForward = vec3(construct.getWorldOrientationForward())
                local worldRight = vec3(construct.getWorldOrientationRight())
                local worldVertical = vec3(core.getWorldVertical())
                local constructVelocity = vec3(construct.getWorldVelocity())
                local constructVelocityDir = constructVelocity:normalize()
                -- are we in deep space or are we near a planet ?
                if planetInfluence > 0 then
                    -- stabilize orientation along the gravity
                    if (rollPID == nil) then
                        rollPID = pid.new(0.2, 0, 10)
                        pitchPID = pid.new(0.2, 0, 10)
                    end

                    local yawVelocity = vec3(construct.getWorldAngularVelocity()):dot(worldUp)
                    local currentRoll = getRoll(worldVertical, worldForward, worldRight)
                    local currentPitch = -math.asin(worldForward:dot(worldVertical)) * constants.rad2deg
                    rollPID:inject(-currentRoll)
                    pitchPID:inject(-currentPitch)
                    local yawAcceleration = - power * yawVelocity
                    angularAcceleration = rollPID:get() * worldForward + pitchPID:get() * worldRight + yawAcceleration * worldUp
                else
                    -- cancel rotation
                    local worldAngularVelocity = vec3(construct.getWorldAngularVelocity())
                    angularAcceleration = - power * worldAngularVelocity
                end
                Nav:setEngineCommand('torque', vec3(), angularAcceleration)

                local gravity = vec3(core.getWorldGravity())
                local acceleration = vec3()
                local engineTags = 'vertical, brake, horizontal'
                if  Hold == true then
                    --targetVelocity = vec3()
                    --targetVelocity = (verticalAutoLandingSpeed / 3.6) * worldVertical
                    oppositeConstruct =  10 * (vec3() - constructVelocity)
                    --Nav:setEngineCommand('vertical, brake', -constructVelocity -vec3(core.getWorldGravity()), vec3(), false)
                    acceleration = oppositeConstruct-gravity
                    engineTags = 'vertical thrust analog, brake, horizontal thrust, longitudinal thrust'
                elseif planetInfluence > planetInfluenceThreshold then
                    if BrakeLanding then
                        -- Thrust
                        local oppositeConstruct = 1 * (vec3() - constructVelocity)
                        local factor = groundDistance > 0 and 0.2+0.8/(80/groundDistance) or 1
                        --system.print("factor="..factor)
                        local targetVelocity = (verticalAutoLandingSpeed / 3.6) * worldVertical * factor
                        acceleration = -gravity+targetVelocity+oppositeConstruct
                        --acceleration = -brakeInput * (3 * constructVelocity + 1 * constructVelocityDir)
                        --Nav:setEngineForceCommand('thrust', vec3())
                        engineTags = 'vertical thrust analog, brake, longitudinal thrust'
                    elseif BrakeLanding2 then
                        -- Brakes
                        local brakeAcceleration = -brakeInput * (3 * constructVelocity + 1 * constructVelocityDir)
                        Nav:setEngineForceCommand('thrust', vec3())
                        acceleration = brakeAcceleration
                        engineTags = 'brake'
                    else
                        -- no acceleration other than counter gravity
                        acceleration = -gravity
                        engineTags = 'thrust analog'
                    end
                else
                    -- immobilize ship when not
                    acceleration =  power * -constructVelocity
                    engineTags = 'vertical thrust analog, brake, horizontal thrust'
                end
                --Nav:setEngineCommand(engineTags, acceleration, vec3())
                Nav:setEngineForceCommand(engineTags, acceleration)

        onUpdate:
            lua: |
                local accelThreshold = 0.01
                local speedThreshold = 0.1
                local landedGroundHeight = 0 -- export: ECU should turn off when landingGroundHeight+3 is reached.  Default is 0

                -- auto stopping mechanism when immobile and close to planet
                local accel = vec3(construct.getWorldAcceleration()):len()
                local velocity = vec3(construct.getWorldVelocity())
                local speed = velocity:len()
                groundDistance, maxRange = AboveGroundLevel()
                --system.print("dist="..math.floor(groundDistance*100)/100)
                local up = -vec3(core.getWorldVertical())
                local velMag = velocity:len()
                local vSpd = velocity:dot(up)
                if BrakeIsOn then
                    --brakeInput = 1
                else
                    --brakeInput = 0
                end

                if BrakeLanding then
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                    Nav.axisCommandManager:setTargetGroundAltitude(500)
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)
                    if groundDistance > -1 then
                        if velMag < 10 then
                            -- finish remaining distance using hovers
                            --TODO fix this for VTOL ships?

                            --BrakeLanding = false
                            Nav.control.deployLandingGears()
                            Nav.axisCommandManager:setTargetGroundAltitude(landedGroundHeight)
                            BrakeIsOn = true
                        else
                            BrakeIsOn = true
                        end
                    elseif (velocity:normalize():dot(-up) < 0.99) then
                        BrakeIsOn = true
                    elseif vSpd < -(verticalAutoLandingSpeed/3.6) then
                        BrakeIsOn = true
                    else
                        BrakeIsOn = false
                    end
                end                
                if Hold == false then
                    if (accel < accelThreshold
                        and speed < speedThreshold
                        and planetInfluence > (planetInfluenceThreshold ~= nil and planetInfluenceThreshold or 0.6))
                        or (groundDistance > -1 and groundDistance < landedGroundHeight+3)
                    then
                        --TODO make it where it doesn't exit on slow brake landing
                        unit.exit()
                    end
                end
