# Custom ECU by TheGreatSardini

name: DEFAULT--ECU


slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    gyro:
        class: GyroUnit
    vBooster:
        class: VerticalBooster
    hover:
        class: Hovercraft
    telemeter:
        class: TelemeterUnit
        select: manual

handlers:
    unit:
        onStart:
            lua: |
                Nav = Navigator.new(system, core, unit)
                planetInfluenceThreshold = 0.6
                if antigrav ~= nil then
                    antigrav.activate()
                    antigrav.showWidget()
                end

                local lastvgd = -1
                local lasthgd = -1
                function AboveGroundLevel()
                 local function hoverDetectGround()
                  local vGndDist,vGndMax,hGndDist,hGndMax = -1,-1,-1,-1
                  if vBooster then
                   vGndDist = vBooster.getDistance()
                   vGndMax = vBooster.getMaxDistance()
                   if vGndDist > -1 and vGndDist < 0.01 then vGndDist = lastvgd else lastvgd = vGndDist end
                  end
                  if hover then
                   hGndDist = hover.getDistance()
                   hGndMax = hover.getMaxDistance()
                   if hGndDist > -1 and hGndDist < 0.01 then hGndDist = lasthgd else lasthgd = hGndDist end
                  end
                  if vGndDist ~= -1 and hGndDist ~= -1 then
                   if vGndDist < hGndDist then
                    return vGndDist, math.max(vGndMax,hGndMax)
                   else
                    return hGndDist, math.max(vGndMax,hGndMax)
                   end
                  elseif vGndDist ~= -1 then
                   return vGndDist, vGndMax
                  elseif hGndDist ~= -1 then
                   return hGndDist, hGndMax
                  else
                   return -1, math.max(vGndMax,hGndMax)
                  end
                 end
                 local hovGndDet, hovGndMax = hoverDetectGround() 
                 local telGndDet = -1
                 local cAV = construct.getVelocity()
                 --local velMag = vectorLen(cAV[1], cAV[2], cAV[3])
                 if telemeter_1 then 
                  telGndDet = telemeter_1.raycast().distance
                  if telGndDet == 0 then telGndDet = -1 end
                 end
                 if hovGndDet > 0.2 and telGndDet ~= -1 then
                  if hovGndDet < telGndDet then 
                   return hovGndDet, hovGndMax
                  else
                   return telGndDet, hovGndMax
                  end
                 elseif telGndDet ~= -1 then
                  return telGndDet, hovGndMax
                 else
                  return hovGndDet, hovGndMax
                 end
                end

    system:
        onFlush:
            lua: |
                local autoLand = true --export: Should ship autoLand if ECU activates.  False means continue level flight.
                Hold = false --export: Stop moving, hold position and altitude
                local verticalAutoLandingSpeed = 50 --export: Vertical auto landing speec in km/h
                local power = 3

                local worldUp = vec3(construct.getWorldOrientationUp())
                local worldForward = vec3(construct.getWorldOrientationForward())
                local worldRight = vec3(construct.getWorldOrientationRight())
                local worldVertical = vec3(core.getWorldVertical())

                -- Maintain current thrust?
                if not Hold and not autoLand then
                    --do nothing
                else
                    -- are we in deep space or are we near a planet ?
                    local planetInfluence = unit.getClosestPlanetInfluence()
                    if planetInfluence > 0
                    then
                        -- stabilize orientation along the gravity
                        if (rollPID == nil) then
                            rollPID = pid.new(0.2, 0, 10)
                            pitchPID = pid.new(0.2, 0, 10)
                        end

                        local yawVelocity = vec3(construct.getWorldAngularVelocity()):dot(worldUp)
                        local currentRoll = getRoll(worldVertical, worldForward, worldRight)
                        local currentPitch = -math.asin(worldForward:dot(worldVertical)) * constants.rad2deg
                        rollPID:inject(-currentRoll)
                        pitchPID:inject(-currentPitch)
                        local yawAcceleration = - power * yawVelocity
                        angularAcceleration = rollPID:get() * worldForward + pitchPID:get() * worldRight + yawAcceleration * worldUp
                    else
                        -- cancel rotation
                        local worldAngularVelocity = vec3(construct.getWorldAngularVelocity())
                        angularAcceleration = - power * worldAngularVelocity
                    end
                    Nav:setEngineCommand('torque', vec3(), angularAcceleration)

                    if planetInfluence > planetInfluenceThreshold
                    and not Hold
                    then
                        groundDistance, _ = AboveGroundLevel()
                        local factor = groundDistance > 0 and 0.2+0.8/(80/groundDistance) or 1
                        -- go down at verticalTargetSpeed when very close to a planet
                        targetVelocity = (verticalAutoLandingSpeed / 3.6) * factor * worldVertical
                    else
                        -- immobilize ship when not
                        targetVelocity = vec3()
                        --system.print("immobilize")
                    end
                    stabilization =  (power * (targetVelocity - vec3(construct.getWorldVelocity()))) -vec3(core.getWorldGravity())
                    Nav:setEngineCommand('airfoil,brake,not_ground thrust,ground', stabilization, vec3(), false, 1, 'airfoil,brake', 'hover_engine', 'eco', 0)
                end
        onUpdate:
            lua: |
                local accelThreshold = 0.1
                local speedThreshold = 0.1

                -- auto stopping mechanism when immobile and close to planet and not holding
                local accel = vec3(construct.getWorldAcceleration()):len()
                local speed = vec3(construct.getWorldVelocity()):len()
                if accel < accelThreshold
                and speed < speedThreshold
                and unit.getClosestPlanetInfluence() > planetInfluenceThreshold
                and not Hold
                then
                    unit.exit()
                end
